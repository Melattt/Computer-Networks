TFTP, the Trivial File Transfer Protocol, is used to upload and download files. The
following session shows how to connect to a server running on localhost port 69 and
download the file RFC1350.txt. Note that the session uses localhost and the default
port, 69; change it to the address and port your server is listening to when you test
your server. The example shows how the tftp client works. It is generally preinstalled 
on Linux and macOS; you can download a GUI client for Windows from the link
provided above.

You begin by launching the program ( tftp ). You then connect to a remote endpoint
( connect [hostname or IP] [portnumber] ). Once a connection is established, you can
upload or download files using the get and put commands ( get FILENAME ). You need
to use mode to specify whether the file should be sent as ascii or octet (or
binary ). TFTP is a trivial file tranfer service, so there is no way to change
directories or list files, just upload and download.

Your task is to implement a TFTP server according to RFC1350. The server only has to
support the octet mode. This is a complex task, so we suggest you break it down into
the following steps:
1. Download the TFTPServer starter code, open the full TFTP specification, and
read both of these. Try to get an overall picture of the work to come. Note
that the testing tools can also be helpful to have a look at.
2. Get the provided code to handle a single read request. This involves the
following steps:
1. Listen on the predefined port by implementing a receiveFrom() method.
2. Parse a read request by implementing a ParseRQ() method. The first 2
bytes of the message contains the opcode indicating the type of request.
3. Open the requested file
4. Create the response packet. Add the opcode for data ( OP_DATA ) and a
block number (1). These are unsigned shorts in network byte order.
5. Read a maximum of 512 bytes from the file, add these to the packet and
send it to the client.
6. If everything works, the client will respond with an acknowledgment
( ACK ) of your first package.
Once you have successfully completed the steps, make a read request from the
client (request to read a file that is shorter than 512 bytes) and check that
everything works properly. Include a screenshot of this in your report.
After successfully reading the requests, examine the TFTPServer starter code
once more and explain in your report why it uses both socket and sendSocket .
Explain how you went about solving this problem in your report.
Hints
The following code sample shows how to read unsigned shorts from the received packet.
Use putShort if you want to write an unsigned short.
